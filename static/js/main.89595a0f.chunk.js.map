{"version":3,"sources":["components/FormInput.js","components/BMICalculator.js","components/BMI.js","App.js","serviceWorker.js","index.js"],"names":["FormInput","props","title","type","name","value","onChange","className","autoComplete","BMICalculator","getBmiValue","useState","heightUnit","setHeightUnit","weightUnit","setWeightUnit","unit","setUnit","heightCount","inchesCount","weightCount","count","setCount","useEffect","metricBMI","imperialBMI","onChangeInput","e","target","prevState","height","weight","bmi","Math","pow","round","inches","heightToInches","parseInt","onClick","preventDefault","BMI","bmiValue","setBmiValue","bmiCategory","bmiClass","toLowerCase","style","backgroundColor","bmiBackgroundColor","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.89595a0f.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst FormInput = (props) => {\r\n    const {\r\n        title,\r\n        type,\r\n        name,\r\n        value,\r\n        onChange\r\n    } = props;\r\n\r\n    return (\r\n        <div className=\"input-groups\">\r\n            <span className=\"label\">{title}</span>\r\n            <div className=\"range-container\">\r\n                <input\r\n                    className=\"range-input\"\r\n                    type={type}\r\n                    name={name}\r\n                    value={value}\r\n                    onChange={onChange}\r\n                    autoComplete=\"false\">\r\n                </input>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nFormInput.propTypes = {\r\n    title: PropTypes.string,\r\n    type: PropTypes.oneOf(['text']),\r\n    value: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired\r\n}\r\n\r\nexport default FormInput\r\n\r\n","import React, { Fragment, useState, useEffect } from 'react'\r\nimport FormInput from './FormInput'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst BMICalculator = props => {\r\n    const { getBmiValue } = props;\r\n    const [heightUnit, setHeightUnit] = useState(\"cm\");\r\n    const [weightUnit, setWeightUnit] = useState(\"kg\");\r\n    const [unit, setUnit] = useState(\"Metric\");\r\n    const [count, setCount] = useState({\r\n        heightCount: \"0\",\r\n        inchesCount: \"0\",\r\n        weightCount: \"0\"\r\n    });\r\n\r\n    const { heightCount, inchesCount, weightCount } = count;\r\n\r\n    useEffect(() => {\r\n        metricBMI(heightCount, weightCount);\r\n        imperialBMI(heightCount, weightCount, inchesCount);\r\n\r\n        //eslint-disable-next-line\r\n    }, [heightCount, weightCount, inchesCount]);\r\n\r\n    const onChangeInput = (e) => {\r\n        const { name, value } = e.target;\r\n        setCount(prevState => ({ ...prevState, [name]: value }));\r\n    }\r\n\r\n    const onSelectTag = e => {\r\n        setUnit(e.target.value);\r\n        if (e.target.value === \"Metric\") {\r\n            setHeightUnit(\"cm\");\r\n            setWeightUnit(\"kg\");\r\n        }\r\n        else {\r\n            setHeightUnit(\"ft\");\r\n            setWeightUnit(\"lbs\");\r\n        }\r\n    }\r\n\r\n    const metricBMI = (height, weight) => {\r\n        if (height > 0 && weight > 0) {\r\n            const bmi = weight / Math.pow(height / 100, 2);\r\n            getBmiValue(Math.round(bmi));\r\n        }\r\n    };\r\n\r\n    const imperialBMI = (height, weight, inches) => {\r\n        if (height > 0 && weight > 0 && inches > 0) {\r\n            const heightToInches = height * 12 + parseInt(inches);\r\n            const bmi = 703 * weight / Math.pow(heightToInches / 100, 2);\r\n            getBmiValue(Math.round(bmi));\r\n        }\r\n    };\r\n\r\n    const resetData = e => {\r\n        e.preventDefault();\r\n        getBmiValue(0);\r\n\r\n        setUnit(\"Metric\");\r\n        setHeightUnit(\"cm\");\r\n        setWeightUnit(\"kg\");\r\n        setCount({\r\n            heightCount: \"0\",\r\n            inchesCount: \"0\",\r\n            weightCount: \"0\"\r\n        });\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className=\"bmi-inputs\">\r\n                <div className=\"inputs-fields\">\r\n                    <div>\r\n                        <div className=\"label-unit\">\r\n                            Unit\r\n                        </div>\r\n                        <div className=\"unit\">\r\n                            <select\r\n                                name=\"unit\"\r\n                                value={unit}\r\n                                onChange={onSelectTag}\r\n                                className=\"form-control form-control-sm\">\r\n                                <option value=\"Metric\">Metric</option>\r\n                                <option value=\"Imperial\">Imperial</option>\r\n                            </select>\r\n                        </div>\r\n                        <FormInput type=\"text\"\r\n                            name=\"heightCount\"\r\n                            title={`Height (${heightUnit})`}\r\n                            value={heightCount}\r\n                            onChange={onChangeInput} />\r\n                        {\r\n                            unit === \"Imperial\" ?\r\n                                <FormInput type=\"text\"\r\n                                    name=\"inchesCount\"\r\n                                    title={` (in)`}\r\n                                    value={inchesCount}\r\n                                    onChange={onChangeInput} />\r\n                                : \"\"\r\n                        }\r\n                        <FormInput type=\"text\"\r\n                            name=\"weightCount\"\r\n                            title={`Weight (${weightUnit})`}\r\n                            value={weightCount}\r\n                            onChange={onChangeInput} />\r\n                    </div>\r\n\r\n                    <button className=\"button\" type=\"submit\" onClick={resetData}>\r\n                        Reset\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nBMICalculator.propTypes = {\r\n    getBmiValue: PropTypes.func.isRequired\r\n}\r\n\r\nexport default BMICalculator\r\n","import React, { Fragment, useState } from 'react'\r\nimport BMICalculator from './BMICalculator'\r\n\r\nconst BMI = () => {\r\n    const [bmiValue, setBmiValue] = useState(0);\r\n\r\n    const getBmiClass = bmi => {\r\n        if (bmi >= 1 && bmi < 18.5) return \"Underweight\";\r\n        if (bmi >= 18.5 && bmi < 24.9) return \"Normal\";\r\n        if (bmi >= 24.9 && bmi < 29.9) return \"Overweight\";\r\n        if (bmi >= 30) return \"Obese\";\r\n    };\r\n\r\n    const bmiCategory = getBmiClass(bmiValue);\r\n    let bmiClass = \"\";\r\n    if (bmiValue > 0 && bmiCategory) {\r\n        bmiClass = bmiCategory.toLowerCase();\r\n    };\r\n\r\n    const bmiBackgroundColor = bmi => {\r\n        if (bmi >= 1 && bmi < 18.5) return \"#FED88B\";\r\n        if (bmi >= 18.5 && bmi < 24.9) return \"#80ff80\";\r\n        if (bmi >= 24.9 && bmi < 29.9) return \"#FF7F50\";\r\n        if (bmi >= 30) return \"#FF5411\";\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className=\"calculator\" style={{ backgroundColor: bmiBackgroundColor(bmiValue) }}>\r\n                <h3>Body Mass Index Calculator</h3>\r\n                <div className=\"bmi-result-container\">\r\n                    <div className=\"bmi-result\">\r\n                        <div className=\"bmi-result-number\">\r\n                            Body Mass Index (BMI) = {bmiValue}\r\n                        </div>\r\n                        <div className={bmiClass}>\r\n                            {bmiCategory}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <BMICalculator getBmiValue={setBmiValue} />\r\n            </div>\r\n        </Fragment >\r\n    )\r\n}\r\n\r\nexport default BMI\r\n","import React from 'react';\nimport './App.css';\nimport BMI from './components/BMI';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <div className=\"row justify-content-center\">\n        <div className=\"col-lg-6 col-lg-offset-3\">\n          <BMI />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}